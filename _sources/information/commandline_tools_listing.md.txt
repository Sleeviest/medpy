List of commandline tools {#top}
=========================

MedPy is shipped with a number of python scripts (little programs) that
are installed on your system together with MedPy. On this page you can
find a short overview over these scripts. All are prefixed with
**medpy\_**.

Categories
----------

-   `basic`{.interpreted-text role="ref"}
-   `volume`{.interpreted-text role="ref"}
-   `binary`{.interpreted-text role="ref"}
-   `filter`{.interpreted-text role="ref"}
-   `mr`{.interpreted-text role="ref"}
-   `gc`{.interpreted-text role="ref"}
-   `others`{.interpreted-text role="ref"}

Basic image manipulation {#basic}
------------------------

`↑top <top>`{.interpreted-text role="ref"}

::: {.topic}
**medpy\_info.py
([notebook](https://github.com/loli/medpy/blob/master/notebooks/scripts/medpy_info.py.ipynb))**

Prints basic information about an image to the stdout.
:::

::: {.topic}
**medpy\_convert.py
([notebook](https://github.com/loli/medpy/blob/master/notebooks/scripts/medpy_convert.py.ipynb))**

Converts between two image formats. Alternatively can be used to create
an empty image by example.
:::

::: {.topic}
**medpy\_create\_empty\_volume\_by\_example.py
([notebook](https://github.com/loli/medpy/blob/master/notebooks/scripts/medpy_create_empty_volume_by_example.py.ipynb))**

Can be used to create an empty image by example.
:::

::: {.topic}
**medpy\_resample.py**

Re-samples an image using b-spline interpolation.
:::

::: {.topic}
**medpy\_set\_pixel\_spacing.py**

Manually set the pixel/voxel spacing of an image.
:::

::: {.topic}
**medpy\_diff.py
([notebook](https://github.com/loli/medpy/blob/master/notebooks/scripts/medpy_diff.py.ipynb))**

Compares the meta-data and intensity values of two images.
:::

::: {.topic}
**medpy\_grid.py**

Creates a binary volume containing a regular grid.
:::

::: {.topic}
**medpy\_extract\_min\_max.py**

Extracts the min and max intensity values of one or more images.
:::

::: {.topic}
**medpy\_swap\_dimensions.py**

Swap two image dimensions.
:::

Image volume manipulation {#volume}
-------------------------

`↑top <top>`{.interpreted-text role="ref"}

::: {.topic}
**medpy\_extract\_sub\_volume.py
([notebook](https://github.com/loli/medpy/blob/master/notebooks/scripts/medpy_extract_sub_volume.py.ipynb))**

Extracts a sub volume from an image.
:::

::: {.topic}
**medpy\_extract\_sub\_volume\_auto.py**

Splits a volume into a number of sub volumes along a given dimension.
:::

::: {.topic}
**medpy\_extract\_sub\_volume\_by\_example.py
([notebook](https://github.com/loli/medpy/blob/master/notebooks/scripts/medpy_extract_sub_volume_by_example.py.ipynb))**

Takes an image and a second image containing a binary mask, then
extracts the sub volume of the first image defined by the bounding box
of the foreground object in the binary image.
:::

::: {.topic}
**medpy\_fit\_into\_shape.py**

Fit an existing image into a new shape by either extending or cutting
all dimensions symmetrically.
:::

::: {.topic}
**medpy\_intersection.py**

Extracts the intersecting parts of two volumes regarding offset and
voxel-spacing.
:::

::: {.topic}
**medpy\_join\_xd\_to\_xplus1d.py**

Joins a number of xD images by adding a new dimension, resulting in a
(x+1)D image.
:::

::: {.topic}
**medpy\_split\_xd\_to\_xminus1d.py**

Splits a xD image into a number of (x-1)D images.
:::

::: {.topic}
**medpy\_stack\_sub\_volumes.py**

Stacks a number of sub volumes together along a defined dimension.
:::

::: {.topic}
**medpy\_zoom\_image.py**

Enlarges an image by adding (interpolated) slices.
:::

::: {.topic}
**medpy\_shrink\_image.py**

Reduces an image by simply discarding slices.
:::

::: {.topic}
**medpy\_reslice\_3d\_to\_4d.py**

Reslices a 3D image formed by stacked up 3D volumes into a real 4D
images (as e.g. often necessary for DICOM).
:::

::: {.topic}
**medpy\_dicom\_slices\_to\_volume.py**

Takes a number of 2D DICOM slice (a DICOM series) and creates a 3D
volume from them.
:::

::: {.topic}
**medpy\_dicom\_to\_4D.py**

Takes a number of 2D DICOM slice (a DICOM series) and creates a 4D
volume from them (split-points are passed as arguments).
:::

Binary image manipulation {#binary}
-------------------------

`↑top <top>`{.interpreted-text role="ref"}

::: {.topic}
**medpy\_binary\_resampling.py**

Re-samples a binary image according to a supplied voxel spacing using
shape based interpolation where necessary.
:::

::: {.topic}
**medpy\_extract\_contour.py
([notebook](https://github.com/loli/medpy/blob/master/notebooks/scripts/medpy_extract_contour.py.ipynb))**

Converts a binary volume into a surface contour.
:::

::: {.topic}
**medpy\_join\_masks.py**

Joins a number of binary images into a single conjunction using sum,
avg, max or min.
:::

::: {.topic}
**medpy\_merge.py**

Performs a logical OR on two binary images.
:::

Image filters {#filter}
-------------

`↑top <top>`{.interpreted-text role="ref"}

::: {.topic}
**medpy\_gradient.py
([notebook](https://github.com/loli/medpy/blob/master/notebooks/scripts/medpy_gradient.py.ipynb))**

Gradient magnitude image filter. Output is float.
:::

::: {.topic}
**medpy\_morphology.py**

Apply binary morphology (dilation, erosion, opening or closing) to a
binary image.
:::

::: {.topic}
**medpy\_anisotropic\_diffusion.py
([notebook](https://github.com/loli/medpy/blob/master/notebooks/scripts/medpy_anisotropic_diffusion.py.ipynb))**

Apply the edge preserving anisotropic diffusion filter to an image.
:::

::: {.topic}
**medpy\_watershed.py
([notebook](https://github.com/loli/medpy/blob/master/notebooks/scripts/medpy_watershed.py.ipynb))**

Applies a watershed filter, results in a label map / region image.
:::

Magnetic resonance (MR) related {#mr}
-------------------------------

`↑top <top>`{.interpreted-text role="ref"}

::: {.topic}
**medpy\_apparent\_diffusion\_coefficient.py
([notebook](https://github.com/loli/medpy/blob/master/notebooks/scripts/medpy_apparent_diffusion_coefficient.py.ipynb))**

Computes the apparent diffusion coefficient (ADC) map from two diffusion
weight (DW) volumes acquired with different b-values.
:::

::: {.topic}
**medpy\_intensity\_range\_standardization.py**

Standardizes the intensity ranges of a number of MR images and produces
a corresponding model that can be applied to new images.
:::

Graph-cut {#gc}
---------

`↑top <top>`{.interpreted-text role="ref"}

GC based on (and shipped with, ask!) Max-flow/min-cut by
Boykov-Kolmogorov algorithm, version 3.01[^1].

::: {.topic}
**medpy\_graphcut\_voxel.py
([notebook](https://github.com/loli/medpy/blob/master/notebooks/scripts/medpy_graphcut_voxel.py.ipynb))**

Executes a voxel based graph cut. Only supports the boundary term.
:::

::: {.topic}
**medpy\_graphcut\_label.py
([notebook](https://github.com/loli/medpy/blob/master/notebooks/scripts/medpy_graphcut_label.py.ipynb))**

Executes a label based graph cut. Only supports the boundary term.
:::

::: {.topic}
**medpy\_graphcut\_label\_bgreduced.py**

Executes a label based graph cut. Only supports the boundary term.
Reduces the input image by considering only the region defined by the
bounding box around the background markers.
:::

::: {.topic}
**medpy\_graphcut\_label\_wsplit.py**

Executes a label based graph cut. Only supports the boundary term.
Reduces the memory requirements by splitting the image into a number of
sub-volumes. Note that this will result in a non-optimal cut.
:::

::: {.topic}
**medpy\_graphcut\_label\_w\_regional.py**

Executes a label based graph cut. With boundary and regional term.
:::

::: {.topic}
**medpy\_label\_count.py**

Counts the number of unique intensity values in an image i.e. the amount
of labelled regions.
:::

::: {.topic}
**medpy\_label\_fit\_to\_mask.py**

Fits the labelled regions of a label map image to a binary segmentation
map.
:::

::: {.topic}
**medpy\_label\_superimposition.py**

Takes to label maps and superimpose them to create a new label image
with more regions.
:::

Others
------

`↑top <top>`{.interpreted-text role="ref"}

References
----------

[^1]: <http://vision.csd.uwo.ca/code/>
